%clear all the objects and close all the open tabs and figures
clc;
close all;

%Load 40 features on the map
map = Map(40);

%Create a diagonal covariance matrix to model the errors acquired from odometer data
V = diag([0.1, 1*pi/180].^2);

%model the vehicle in correspondence to the bicycle model with previous assumed odometer errors
veh = Vehicle(V);

%preload a random path generated by the toolbox within the dimensions of 10 and 4 units
veh.add_driver( RandomPath(10) );

%Create a diagonal covariance matrix to model the errors acquired from sensor data
W = diag([0.005, 0.5*pi/180].^2);

%model a Laser with the previously defined sensor errors
sensor = RangeBearingSensor(veh, map, W);

%q is drawn from a Gaussian random variable with covariance Q but any physically meaningfull distribution can be used
Q = diag([0.1, 0.1, 1*pi/180]).^2;

%L is a covariance matrix, and w0> 0 ensures that there is a finite but small probability associated with any point in the state space
L = diag([0.1 0.1]);

% Perform Monte-Carlo / Particle Filter SLAM with the variables as defined above
pf = ParticleFilter(veh, sensor, Q, L, 1000);

%run the simulation for 1000 iterations which is equal to total number of particles in the map
pf.run(1000);

%%plot the map for the actual position of the vehicle in BLUE, EKF SLAM estimation in RED
figure('Name','Monte-Carlo Localization Estimation Plot')
title('Monte-Carlo Localization Estimation Plot')
map.plot();
veh.plot_xy('b');
pf.plot_xy('r');
figure('Name','Reduction in uncertainity over time')
title('Reduction in uncertainity over time')
plot(pf.std(1:100,:))