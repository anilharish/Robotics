%clear all the objects and close all the open tabs and figures
clc;
close all;

%Create a diagonal covariance matrix to model the errors acquired from odometer data
V = diag([0.1, 1*pi/180].^2);

%model the vehicle in correspondence to the bicycle model with previous assumed odometer errors 
veh = Vehicle(V);

%preload a random path generated by the toolbox within the dimensions of 10 and 4 units
veh.add_driver( RandomPath(10, 4) );

%Load 20 features on the map
map = Map(20);

%Create a diagonal covariance matrix to model the errors acquired from sensor data
W = diag([0.005, 0.5*pi/180].^2);

%model a Laser with the previously defined sensor errors
sensor = RangeBearingSensor(veh, map, W);

%initial covariance matrix with only diagonal elements with assumed variance and uncertainty
P0 = diag([0.005, 0.005, 0.001].^2);

% Perform Extended Kalman Filter SLAM with the variables
ekf = EKF(veh, V , P0, sensor, W, map);

%run the simulation for 1000 cycles
ekf.run(1000);

%plot the map for the actual position of the vehicle in BLUE, EKF SLAM estimation in RED and overlay uncertainty ellipses in GREEN for every 20 time steps
map.plot();
figure('Name','Extended Kalman Filtering Localization Estimation Plot')
title('Extended Kalman Filtering Localization Estimation Plot')
veh.plot_xy('b');
ekf.plot_xy('r');
ekf.plot_ellipse(20, 'g');